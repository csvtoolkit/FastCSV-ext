name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write
  issues: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3', '8.4']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: phpize
          
      - name: Build extension
        run: |
          phpize
          ./configure
          make
          
      - name: Create dist directory
        run: mkdir -p dist/releases/${{ github.ref_name }}/linux/php${{ matrix.php-version }}
        
      - name: Copy extension
        run: |
          cp modules/fastcsv.so "dist/releases/${{ github.ref_name }}/linux/php${{ matrix.php-version }}/fastcsv.so"
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds-php${{ matrix.php-version }}
          path: dist/releases/${{ github.ref_name }}/linux/php${{ matrix.php-version }}
          if-no-files-found: warn
          compression-level: 6
          overwrite: true
          include-hidden-files: false
          
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3', '8.4']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: phpize
          
      - name: Build extension
        run: |
          phpize
          ./configure
          make
          
      - name: Create dist directory
        run: mkdir -p dist/releases/${{ github.ref_name }}/macos/php${{ matrix.php-version }}
        
      - name: Copy extension
        run: |
          cp modules/fastcsv.so "dist/releases/${{ github.ref_name }}/macos/php${{ matrix.php-version }}/fastcsv.so"
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds-php${{ matrix.php-version }}
          path: dist/releases/${{ github.ref_name }}/macos/php${{ matrix.php-version }}
          if-no-files-found: warn
          compression-level: 6
          overwrite: true
          include-hidden-files: false
          
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3', '8.4']
        arch: ['x64']
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          arch: ${{ matrix.arch }}
          extensions: none
          
      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v2
        
      - name: Download PHP SDK
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/Microsoft/php-sdk-binary-tools/archive/refs/heads/master.zip" -OutFile "php-sdk.zip"
          Expand-Archive -Path "php-sdk.zip" -DestinationPath "."
          Rename-Item "php-sdk-binary-tools-master" "php-sdk"
          
      - name: Download PHP Dev Pack
        shell: pwsh
        run: |
          $phpVersion = "${{ matrix.php-version }}"
          $majorMinor = $phpVersion -replace '\.', ''
          
          # Get the latest patch version for the PHP major.minor version
          $phpVersionFull = switch ($phpVersion) {
            "8.2" { "8.2.26" }
            "8.3" { "8.3.13" }
            "8.4" { "8.4.0" }
            default { $phpVersion + ".0" }
          }
          
          $devPackUrl = "https://windows.php.net/downloads/releases/php-devel-pack-${phpVersionFull}-Win32-vs16-${{ matrix.arch }}.zip"
          Write-Host "Downloading PHP Dev Pack from: $devPackUrl"
          
          try {
            Invoke-WebRequest -Uri $devPackUrl -OutFile "php-devel-pack.zip"
            Expand-Archive -Path "php-devel-pack.zip" -DestinationPath "."
            $devPackDir = Get-ChildItem -Directory -Filter "php-${phpVersionFull}-devel-*" | Select-Object -First 1
            if ($devPackDir) {
              Rename-Item $devPackDir.FullName "php-dev"
            }
          } catch {
            Write-Host "Failed to download dev pack, trying alternative version..."
            # Fallback to a slightly different version format
            $devPackUrl = "https://windows.php.net/downloads/releases/php-devel-pack-${phpVersion}.0-Win32-vs16-${{ matrix.arch }}.zip"
            Invoke-WebRequest -Uri $devPackUrl -OutFile "php-devel-pack.zip"
            Expand-Archive -Path "php-devel-pack.zip" -DestinationPath "."
            $devPackDir = Get-ChildItem -Directory -Filter "php-*-devel-*" | Select-Object -First 1
            if ($devPackDir) {
              Rename-Item $devPackDir.FullName "php-dev"
            }
          }
          
      - name: Build extension
        shell: cmd
        run: |
          set PHP_SDK_ROOT=%CD%\php-sdk
          set PHP_DEV_ROOT=%CD%\php-dev
          
          call "%PHP_SDK_ROOT%\phpsdk-vs16-x64.bat"
          
          echo Current directory: %CD%
          dir
          
          echo Setting up build environment...
          set PHPRC=%PHP_DEV_ROOT%
          set PHP_BUILD_DIR=%CD%
          
          echo Building extension...
          "%PHP_DEV_ROOT%\phpize.bat"
          if errorlevel 1 exit /b 1
          
          configure.bat --enable-fastcsv --with-php-build="%PHP_DEV_ROOT%"
          if errorlevel 1 exit /b 1
          
          nmake
          if errorlevel 1 exit /b 1
          
          echo Build completed. Looking for output files:
          dir /s *.dll | findstr fastcsv
          
      - name: Create dist directory
        run: mkdir -p dist/releases/${{ github.ref_name }}/windows/php${{ matrix.php-version }}-${{ matrix.arch }}
        
      - name: Copy extension
        shell: pwsh
        run: |
          $dllPaths = @(
            "Release_TS\php_fastcsv.dll",
            "x64\Release_TS\php_fastcsv.dll", 
            "Release\php_fastcsv.dll",
            "x64\Release\php_fastcsv.dll",
            "modules\php_fastcsv.dll"
          )
          
          $found = $false
          foreach ($path in $dllPaths) {
            if (Test-Path $path) {
              Write-Host "Found extension at: $path"
              Copy-Item "$path" "dist/releases/${{ github.ref_name }}/windows/php${{ matrix.php-version }}-${{ matrix.arch }}/fastcsv.dll"
              $found = $true
              break
            }
          }
          
          if (-not $found) {
            Write-Host "ERROR: Could not find php_fastcsv.dll in any expected locations:"
            $dllPaths | ForEach-Object { Write-Host "  Checked: $_" }
            Write-Host "Available DLL files:"
            Get-ChildItem -Recurse -Filter "*.dll" | Select-Object FullName
            exit 1
          }
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds-php${{ matrix.php-version }}-${{ matrix.arch }}
          path: dist/releases/${{ github.ref_name }}/windows/php${{ matrix.php-version }}-${{ matrix.arch }}
          if-no-files-found: warn
          compression-level: 6
          overwrite: true
          include-hidden-files: false

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Create release directories
        run: |
          mkdir -p dist/releases/${{ github.ref_name }}/{linux,macos,windows,final}
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/releases/${{ github.ref_name }}
          
      - name: Debug - List all downloaded artifacts
        run: |
          echo "=== Full directory structure ==="
          find dist/releases/${{ github.ref_name }} -type f
          echo "=== End directory structure ==="
          
      - name: Prepare release files
        run: |
          echo "=== Starting file preparation ==="
          
          # Debug - Show all .so and .dll files
          echo "Looking for .so and .dll files..."
          find dist/releases/${{ github.ref_name }} -name "*.so" -o -name "*.dll"
          
          # Process Linux builds
          echo "=== Processing Linux builds ==="
          for artifact_dir in dist/releases/${{ github.ref_name }}/linux-builds-php*; do
            if [ -d "$artifact_dir" ]; then
              php_ver=$(basename "$artifact_dir" | grep -o 'php[0-9]\.[0-9]' | sed 's/php//')
              echo "Processing Linux artifact directory: $artifact_dir for PHP $php_ver"
              for file in $(find "$artifact_dir" -name "*.so"); do
                echo "Found Linux build: $file"
                cp -v "$file" "dist/releases/${{ github.ref_name }}/final/fastcsv-linux-php${php_ver}.so"
              done
            fi
          done
          
          # Process macOS builds
          echo "=== Processing macOS builds ==="
          for artifact_dir in dist/releases/${{ github.ref_name }}/macos-builds-php*; do
            if [ -d "$artifact_dir" ]; then
              php_ver=$(basename "$artifact_dir" | grep -o 'php[0-9]\.[0-9]' | sed 's/php//')
              echo "Processing macOS artifact directory: $artifact_dir for PHP $php_ver"
              for file in $(find "$artifact_dir" -name "*.so"); do
                echo "Found macOS build: $file"
                cp -v "$file" "dist/releases/${{ github.ref_name }}/final/fastcsv-macos-php${php_ver}.so"
              done
            fi
          done

          # Process Windows builds
          echo "=== Processing Windows builds ==="
          for artifact_dir in dist/releases/${{ github.ref_name }}/windows-builds-php*; do
            if [ -d "$artifact_dir" ]; then
              php_ver=$(basename "$artifact_dir" | grep -o 'php[0-9]\.[0-9]' | sed 's/php//')
              arch=$(basename "$artifact_dir" | grep -o 'x64$')
              echo "Processing Windows artifact directory: $artifact_dir for PHP $php_ver ($arch)"
              for file in $(find "$artifact_dir" -name "*.dll"); do
                echo "Found Windows build: $file"
                cp -v "$file" "dist/releases/${{ github.ref_name }}/final/fastcsv-windows-php${php_ver}-${arch}.dll"
              done
            fi
          done
          
          echo "=== Files ready for release ==="
          ls -la dist/releases/${{ github.ref_name }}/final/ || echo "No files in final directory"
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            dist/releases/${{ github.ref_name }}/final/fastcsv-linux-php*.so
            dist/releases/${{ github.ref_name }}/final/fastcsv-macos-php*.so
            dist/releases/${{ github.ref_name }}/final/fastcsv-windows-php*.dll
          name: Release ${{ github.ref_name }}
          body: |
            ## FastCSV Extension ${{ github.ref_name }}
            
            ### Available Builds:
            
            #### Linux:
            - PHP 8.2: `fastcsv-linux-php8.2.so`
            - PHP 8.3: `fastcsv-linux-php8.3.so`
            - PHP 8.4: `fastcsv-linux-php8.4.so`
            
            #### macOS:
            - PHP 8.2: `fastcsv-macos-php8.2.so`
            - PHP 8.3: `fastcsv-macos-php8.3.so`
            - PHP 8.4: `fastcsv-macos-php8.4.so`

            #### Windows:
            - PHP 8.2 (x64): `fastcsv-windows-php8.2-x64.dll`
            - PHP 8.3 (x64): `fastcsv-windows-php8.3-x64.dll`
            - PHP 8.4 (x64): `fastcsv-windows-php8.4-x64.dll`
            
            ### Installation
            1. Download the appropriate file for your platform and PHP version
            2. Rename the downloaded file to `fastcsv.so` (Linux/macOS) or `fastcsv.dll` (Windows)
            3. Copy the renamed file to your PHP extensions directory:
               ```bash
               # Find your PHP extension directory
               php -i | grep extension_dir
               
               # Copy and rename in one command (example for Linux PHP 8.2)
               cp fastcsv-linux-php8.2.so /path/to/extension_dir/fastcsv.so
               ```
            4. Add to your php.ini:
               ```ini
               extension=fastcsv.so  # Linux/macOS
               extension=fastcsv.dll  # Windows
               ```
            5. Restart your PHP service/server
            
            ### Verify Installation
            ```bash
            # Check if the extension is loaded
            php -m | grep fastcsv
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false

# Temporarily disabled PECL package build
#  build-pecl-package:
#    needs: create-release
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          submodules: true
#          
#      - name: Setup PHP
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.2'
#          tools: pecl
#          
#      - name: Create PECL package
#        run: |
#          pecl package package.xml
#          
#      - name: Create dist directory
#        run: mkdir -p dist/releases/${{ github.ref_name }}/pecl
#          
#      - name: Copy PECL package
#        run: |
#          cp fastcsv-*.tgz dist/releases/${{ github.ref_name }}/pecl/
#          
#      - name: Upload PECL package
#        uses: actions/upload-artifact@v4
#        with:
#          name: pecl-package-${{ github.sha }}
#          path: dist/releases/${{ github.ref_name }}/pecl
#          if-no-files-found: warn
#          compression-level: 6
#          overwrite: true
#          include-hidden-files: false
#          
#      - name: Attach PECL package to release
#        uses: softprops/action-gh-release@v1
#        with:
#          files: dist/releases/${{ github.ref_name }}/pecl/*
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 